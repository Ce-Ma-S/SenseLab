//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace example { namespace SampleInterface {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ISampleInterfaceService. Instead, SampleInterfaceServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class SampleInterfaceServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ISampleInterfaceService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceFrobateCalledEventArgs^>^ FrobateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceFrobateCalledEventArgs^>^ handler) 
        { 
            return _FrobateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SampleInterfaceServiceEventAdapter^>(sender), safe_cast<SampleInterfaceFrobateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _FrobateCalled -= token; 
        } 
    internal: 
        void raise(SampleInterfaceServiceEventAdapter^ sender, SampleInterfaceFrobateCalledEventArgs^ args) 
        { 
            _FrobateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceBazifyCalledEventArgs^>^ BazifyCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceBazifyCalledEventArgs^>^ handler) 
        { 
            return _BazifyCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SampleInterfaceServiceEventAdapter^>(sender), safe_cast<SampleInterfaceBazifyCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _BazifyCalled -= token; 
        } 
    internal: 
        void raise(SampleInterfaceServiceEventAdapter^ sender, SampleInterfaceBazifyCalledEventArgs^ args) 
        { 
            _BazifyCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceMogrifyCalledEventArgs^>^ MogrifyCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceMogrifyCalledEventArgs^>^ handler) 
        { 
            return _MogrifyCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SampleInterfaceServiceEventAdapter^>(sender), safe_cast<SampleInterfaceMogrifyCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MogrifyCalled -= token; 
        } 
    internal: 
        void raise(SampleInterfaceServiceEventAdapter^ sender, SampleInterfaceMogrifyCalledEventArgs^ args) 
        { 
            _MogrifyCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceGetBarRequestedEventArgs^>^ GetBarRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceGetBarRequestedEventArgs^>^ handler) 
        { 
            return _GetBarRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SampleInterfaceServiceEventAdapter^>(sender), safe_cast<SampleInterfaceGetBarRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetBarRequested -= token; 
        } 
    internal: 
        void raise(SampleInterfaceServiceEventAdapter^ sender, SampleInterfaceGetBarRequestedEventArgs^ args) 
        { 
            _GetBarRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceSetBarRequestedEventArgs^>^ SetBarRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SampleInterfaceServiceEventAdapter^, SampleInterfaceSetBarRequestedEventArgs^>^ handler) 
        { 
            return _SetBarRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SampleInterfaceServiceEventAdapter^>(sender), safe_cast<SampleInterfaceSetBarRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetBarRequested -= token; 
        } 
    internal: 
        void raise(SampleInterfaceServiceEventAdapter^ sender, SampleInterfaceSetBarRequestedEventArgs^ args) 
        { 
            _SetBarRequested(sender, args);
        } 
    }

    // ISampleInterfaceService Implementation
    virtual Windows::Foundation::IAsyncOperation<SampleInterfaceFrobateResult^>^ FrobateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 interfaceMemberFoo);
    virtual Windows::Foundation::IAsyncOperation<SampleInterfaceBazifyResult^>^ BazifyAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ SampleInterfaceBar^ interfaceMemberBar);
    virtual Windows::Foundation::IAsyncOperation<SampleInterfaceMogrifyResult^>^ MogrifyAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ SampleInterfaceBar^ interfaceMemberBar);

    virtual Windows::Foundation::IAsyncOperation<SampleInterfaceGetBarResult^>^ GetBarAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<SampleInterfaceSetBarResult^>^ SetBarAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ byte value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _FrobateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _BazifyCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _MogrifyCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetBarRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetBarRequested;
};

} } } 
