//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace example { namespace SampleInterface {

// Methods
public ref class SampleInterfaceFrobateCalledEventArgs sealed
{
public:
    SampleInterfaceFrobateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 interfaceMemberFoo);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SampleInterfaceFrobateResult^ Result
    {
        SampleInterfaceFrobateResult^ get() { return m_result; }
        void set(_In_ SampleInterfaceFrobateResult^ value) { m_result = value; }
    }

    property int32 Foo
    {
        int32 get() { return m_interfaceMemberFoo; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SampleInterfaceFrobateResult^>^ GetResultAsync(SampleInterfaceFrobateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SampleInterfaceFrobateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SampleInterfaceFrobateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SampleInterfaceFrobateResult^ m_result;
    int32 m_interfaceMemberFoo;
};

public ref class SampleInterfaceBazifyCalledEventArgs sealed
{
public:
    SampleInterfaceBazifyCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ SampleInterfaceBar^ interfaceMemberBar);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SampleInterfaceBazifyResult^ Result
    {
        SampleInterfaceBazifyResult^ get() { return m_result; }
        void set(_In_ SampleInterfaceBazifyResult^ value) { m_result = value; }
    }

    property SampleInterfaceBar^ Bar
    {
        SampleInterfaceBar^ get() { return m_interfaceMemberBar; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SampleInterfaceBazifyResult^>^ GetResultAsync(SampleInterfaceBazifyCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SampleInterfaceBazifyResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SampleInterfaceBazifyResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SampleInterfaceBazifyResult^ m_result;
    SampleInterfaceBar^ m_interfaceMemberBar;
};

public ref class SampleInterfaceMogrifyCalledEventArgs sealed
{
public:
    SampleInterfaceMogrifyCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ SampleInterfaceBar^ interfaceMemberBar);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SampleInterfaceMogrifyResult^ Result
    {
        SampleInterfaceMogrifyResult^ get() { return m_result; }
        void set(_In_ SampleInterfaceMogrifyResult^ value) { m_result = value; }
    }

    property SampleInterfaceBar^ Bar
    {
        SampleInterfaceBar^ get() { return m_interfaceMemberBar; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SampleInterfaceMogrifyResult^>^ GetResultAsync(SampleInterfaceMogrifyCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SampleInterfaceMogrifyResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SampleInterfaceMogrifyResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SampleInterfaceMogrifyResult^ m_result;
    SampleInterfaceBar^ m_interfaceMemberBar;
};

// Readable Properties
public ref class SampleInterfaceGetBarRequestedEventArgs sealed
{
public:
    SampleInterfaceGetBarRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SampleInterfaceGetBarResult^ Result
    {
        SampleInterfaceGetBarResult^ get() { return m_result; }
        void set(_In_ SampleInterfaceGetBarResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SampleInterfaceGetBarResult^>^ GetResultAsync(SampleInterfaceGetBarRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SampleInterfaceGetBarResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SampleInterfaceGetBarResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SampleInterfaceGetBarResult^ m_result;
};

// Writable Properties
public ref class SampleInterfaceSetBarRequestedEventArgs sealed
{
public:
    SampleInterfaceSetBarRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ byte value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property byte Value
    {
        byte get() { return m_value; }
    }

    property SampleInterfaceSetBarResult^ Result
    {
        SampleInterfaceSetBarResult^ get() { return m_result; }
        void set(_In_ SampleInterfaceSetBarResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<SampleInterfaceSetBarResult^>^ GetResultAsync(SampleInterfaceSetBarRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SampleInterfaceSetBarResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SampleInterfaceSetBarResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    byte m_value;
    SampleInterfaceSetBarResult^ m_result;
};

} } } 
